12/03/2024
//Objective - Start recording the progress with Github
const review = 0;
const postsRemaining = "Jax";

const expOne = review && postsRemaining
console.log(expOne)

if (review || postsRemaining) {
    console.log("Thanks for your review! You have 19 posts remaining.");
} else {console.log("This is falsy");
}

const username = 'supersonic456';
const password = 'CorrectPassword';
const passworedEntered = "WrongPassword"
if (password === passworedEntered) {
  console.log("Please provide a password");
} else {
  console.log("Incorrect Password")
}

const isVirtualPetHappy1 = null
const action1 = isVirtualPetHappy21 ? 'wag tail' : 'whimper';
console.log(action1)

function petAction(isVirtualPetHappy) {
    return isVirtualPetHappy ? 'wag tail' : 'whimper';
}

const isVirtualPetHappy = true;
const action = petAction(isVirtualPetHappy);
console.log(action);

13/03/2024
//Aarays
const numbers = [1, 7, 3, 99, 5, 25];

const firstNumber = numbers[0]; // 1
const secondNumber = numbers[1]; // 7
const lastNumber = numbers[5]; // 25

numbers[2] = 14
console.log(numbers)//[1, 7, 14, 99, 5, 25] by inserting variable with declaraction it mutate the value within. with [2]=14 it changes the 'third number' within the array to 14.
console.log(numbers.length)//6

numbers.push(26)
numbers.unshift(0)
console.log(numbers)//[0, 1, 7, 14, 99, 5, 25, 26]
numbers.pop()//remove the element at the end of an array
numbers.shift()//remove the element at the start of an array
console.log(numbers)
const sliceNumbers = numbers.slice(0, -1)
console.log(sliceNumbers)

const starter = ['tomato', 'cream', 'basil'];
const main = ['lemon', 'thyme', 'chicken'];
const dessert = ['apple', 'pastry', 'cream'];

const dinner = [starter, main, dessert];

const selectedStarter = dinner[0][0]; // Select tomato from the starter array
const selectedMain = dinner[1][0];    // Select lemon from the main array
const selectedDessert = dinner[2][0]; // Select apple from the dessert array
const jaxMenu = [selectedStarter, selectedMain, selectedDessert];
console.log(jaxMenu)

//14/03/2024
//For Loop
//for (initialization; condition; iteration) {//code block to execute}
for (let i = 0; i < 3; i++) {
  console.log(i)
}
//i++ is i = i + 1
//i-- is i = i - 1
//i += 3 is i = i + 3
//i -= 5 is i = i - 5

const todoList = ['do the laundry', 'make dinner', 'mount the spice rack'];

for (let i = 0; i < todoList.length; i++) {
  const job = todoList[i]
console.log(job)
}

for (let i = todoList.length - 1; i >= 0; i--) {
  const jobBackward = todoList[i]
  console.log(jobBackward)
};

//15/03/2024
//Write a for loop example but this time loop through an object instead of Arrays
//Write an object with Key:Value 
const morningRoutine = {
  breakfast:'Cheese Sandwitch',
  drink: 'Black coffee',
  wokeUpTime: '6:15am',
  reading: false,
  gaming: true,
}

for (let key in morningRoutine)
console.log('15/03/2024 Morning routine ' + key + ':' + morningRoutine[key])

//16/03/2024
//Write a for loop with if statement
// syntax error example below//when writing object ':' to establish key:value and ',' to separate each properties
User
const journal = {
  wordCount= 250
  topic = 'Work out routine'
  squat = 50
  Protein = true
}

for (let key in journal) {
  console.log(journel[key])
}
//correct version
const journal = {
  wordCount: 250,
  topic:'Work out routine',
  squat: 50,
  Protein: true
}

for (let key in journal) {
  console.log(journel[key])
}

//17/03/2024
//Objective for today, breakdown down each step and the logic of the code block below.
function sortTheKitchen(kitchen){
}
kitchen = {
   hasFridge: true,
  favouriteAppliance: 'KeTtlE',
  food: 'eGgS',
  shelvesInCupboards: 3,
  shelvesNotInCupboards: 2,
  petName: 'RhuBarB',
  hoover: 'DysOn'
  }
for (let key in kitchen){
  if (typeof kitchen[key] === "string"){
    kitchen[key] = kitchen[key].toLowerCase()
//1. The left side of the = (kitchen[key]) is used to access the value associated with the 
current property key within the kitchen object. This allows you to retrieve and 
modify the value stored in that property.
//2. The right side of the = (kitchen[key].toLowerCase()) specifies what action to
 perform on the value obtained from kitchen[key]. In this case, it calls the 
 toLowerCase() method on the value, which converts it to lowercase.
//
  }
}
function sortTheKitchen(kitchen) {
     console.log(kitchen); // Logging the original kitchen state

    // Fix jumbled string values
    for (let key in kitchen) {
        if (typeof kitchen[key] === 'string') {
            kitchen[key] = kitchen[key].toLowerCase();
        }
    }

    // Remove the hoover property
    delete kitchen.hoover;

    // Calculate total number of shelves and remove individual shelf properties
    let totalShelves = 0;
    if (kitchen.hasOwnProperty('shelvesInCupboards')) {
        totalShelves += kitchen.shelvesInCupboards;
        delete kitchen.shelvesInCupboards;
    }
    if (kitchen.hasOwnProperty('shelvesNotInCupboards')) {
        totalShelves += kitchen.shelvesNotInCupboards;
        delete kitchen.shelvesNotInCupboards;
    }

    // Add a key of totalShelves
    kitchen.totalShelves = totalShelves;

    return kitchen;
}

function sortTheKitchen(kitchen) {
    console.log(kitchen);
    // Don't change the code below this line


    for (let key in kitchen) {
        if (typeof kitchen[key] === 'string') {
            kitchen[key] = kitchen[key].toLowerCase();
        }
    }
    delete kitchen.hoover;


for (let key in kitchen){
  if (typeof kitchen[key] === "string"){
    kitchen[key] = kitchen[key].toLowerCase()
  }
 }
  delete kitchen.hoover;

  if ("shelvesInCupboards" in kitchen && "shelvesNotInCupboards" in kitchen) {
    let totalShelves = kitchen.shelvesInCupboards + kitchen.shelvesNotInCupboards;
    delete kitchen.shelvesInCupboards;
    delete kitchen.shelvesNotInCupboards;
    kitchen.totalShelves = totalShelves;
  } else if ("shelvesInCupboards" in kitchen) {
        kitchen.totalShelves = kitchen.shelvesInCupboards;
        delete kitchen.shelvesInCupboards;
    } else if ("shelvesNotInCupboards" in kitchen) {
        kitchen.totalShelves = kitchen.shelvesNotInCupboards;
        delete kitchen.shelvesNotInCupboards;
  }
      return kitchen;
}





